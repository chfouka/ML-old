#############################################################################
# Makefile for building: NeuralNetwork
# Generated by qmake (2.01a) (Qt 4.6.2) on: ven mar 15 15:21:33 2013
# Project:  NeuralNetwork/NeuralNetwork.pro
# Template: app
# Command: /usr/bin/qmake-qt4 -spec /usr/share/qt4/mkspecs/linux-g++ -unix -o Makefile NeuralNetwork/NeuralNetwork.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = 
CFLAGS        = -pipe -O2 -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -std=c++0x -O2 -Wall -W $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -INeuralNetwork -INeuralNetwork -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)    
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = NeuralNetwork/main.cpp \
		NeuralNetwork/Dataset.cpp \
		NeuralNetwork/Pattern.cpp \
		NeuralNetwork/outputlayer.cpp \
		NeuralNetwork/Unit.cpp \
		NeuralNetwork/linearunit.cpp \
		NeuralNetwork/sigmoidalunit.cpp \
		NeuralNetwork/hiddenlayer.cpp \
		NeuralNetwork/network.cpp \
		NeuralNetwork/prova.cpp 
OBJECTS       = main.o \
		Dataset.o \
		Pattern.o \
		outputlayer.o \
		Unit.o \
		linearunit.o \
		sigmoidalunit.o \
		hiddenlayer.o \
		network.o \
		prova.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		NeuralNetwork/NeuralNetwork.pro
QMAKE_TARGET  = NeuralNetwork
DESTDIR       = 
TARGET        = NeuralNetwork

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: NeuralNetwork/NeuralNetwork.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -unix -o Makefile NeuralNetwork/NeuralNetwork.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -unix -o Makefile NeuralNetwork/NeuralNetwork.pro

dist: 
	@$(CHK_DIR_EXISTS) NeuralNetwork/.tmp/NeuralNetwork1.0.0 || $(MKDIR) NeuralNetwork/.tmp/NeuralNetwork1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) NeuralNetwork/.tmp/NeuralNetwork1.0.0/ && (cd `dirname NeuralNetwork/.tmp/NeuralNetwork1.0.0` && $(TAR) NeuralNetwork1.0.0.tar NeuralNetwork1.0.0 && $(COMPRESS) NeuralNetwork1.0.0.tar) && $(MOVE) `dirname NeuralNetwork/.tmp/NeuralNetwork1.0.0`/NeuralNetwork1.0.0.tar.gz . && $(DEL_FILE) -r NeuralNetwork/.tmp/NeuralNetwork1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


compiler_rcc_make_all:
compiler_rcc_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

main.o: NeuralNetwork/main.cpp NeuralNetwork/Dataset.h \
		NeuralNetwork/Pattern.h \
		NeuralNetwork/network.h \
		NeuralNetwork/hiddenlayer.h \
		NeuralNetwork/sigmoidalunit.h \
		NeuralNetwork/Unit.h \
		NeuralNetwork/outputlayer.h \
		NeuralNetwork/linearunit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o NeuralNetwork/main.cpp

Dataset.o: NeuralNetwork/Dataset.cpp NeuralNetwork/Dataset.h \
		NeuralNetwork/Pattern.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Dataset.o NeuralNetwork/Dataset.cpp

Pattern.o: NeuralNetwork/Pattern.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Pattern.o NeuralNetwork/Pattern.cpp

outputlayer.o: NeuralNetwork/outputlayer.cpp NeuralNetwork/outputlayer.h \
		NeuralNetwork/linearunit.h \
		NeuralNetwork/Unit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o outputlayer.o NeuralNetwork/outputlayer.cpp

Unit.o: NeuralNetwork/Unit.cpp NeuralNetwork/Unit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Unit.o NeuralNetwork/Unit.cpp

linearunit.o: NeuralNetwork/linearunit.cpp NeuralNetwork/linearunit.h \
		NeuralNetwork/Unit.h \
		NeuralNetwork/prova.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o linearunit.o NeuralNetwork/linearunit.cpp

sigmoidalunit.o: NeuralNetwork/sigmoidalunit.cpp NeuralNetwork/sigmoidalunit.h \
		NeuralNetwork/Unit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sigmoidalunit.o NeuralNetwork/sigmoidalunit.cpp

hiddenlayer.o: NeuralNetwork/hiddenlayer.cpp NeuralNetwork/hiddenlayer.h \
		NeuralNetwork/sigmoidalunit.h \
		NeuralNetwork/Unit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o hiddenlayer.o NeuralNetwork/hiddenlayer.cpp

network.o: NeuralNetwork/network.cpp NeuralNetwork/network.h \
		NeuralNetwork/hiddenlayer.h \
		NeuralNetwork/sigmoidalunit.h \
		NeuralNetwork/Unit.h \
		NeuralNetwork/outputlayer.h \
		NeuralNetwork/linearunit.h \
		NeuralNetwork/Dataset.h \
		NeuralNetwork/Pattern.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o network.o NeuralNetwork/network.cpp

prova.o: NeuralNetwork/prova.cpp NeuralNetwork/prova.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o prova.o NeuralNetwork/prova.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

